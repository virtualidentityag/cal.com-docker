# This is a basic workflow to help you get started with Actions

name: Build and push image to DockerHub

# Controls when the workflow will run
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  # update on run of Update Calendso nightly submodule update
  workflow_run:
    workflows: ["Update Calendso"]
    branches: [main]
    types:
      - completed
  # Allow running workflow manually from the Actions tab
  workflow_dispatch:

# Leaving in example for releases. Initially we simply push to 'latest'
# on:
  # release:
    # types: [ created ]

  # # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        registry: [ "docker.pkg.github.com"]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2

      - name: Git submodule update
        run: |
          git submodule update --init
          
      - name: Get current time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 2
          format: "YYYYMMDD[_]HHmmss"
      - name: Prepare environment variables
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo BRANCH_NAME=$(echo -n "${branch}") >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=$(echo "${{ matrix.registry }}/${{ github.repository }}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=$(echo "${{ github.repository }}" | awk -F / '{print tolower($2)}')" >> $GITHUB_ENV
          echo "REPO_NAME_WITHOUT_PREFIX"=$(echo "${{ github.repository }}" | sed "s/.*\///" | awk -F / '{print tolower($0)}') >> $GITHUB_ENV
          echo CLEAN_REF=$(echo "${GITHUB_REF_NAME#refs/heads/}") >> $GITHUB_ENV
          echo TYPE=$(echo -n "${GITHUB_REF_TYPE}") >> $GITHUB_ENV
          echo TIME_STAMP=$(echo -n "${{ steps.time.outputs.time }}") >> $GITHUB_ENV
        shell: bash
      - name: Set branch_timestamp for image from branch
        if: ${{ env.TYPE == 'branch' }}
        run: echo DOCKER_IMAGE_TAG=$(echo "${{ env.CLEAN_REF }}_${{ env.TIME_STAMP }}") >> $GITHUB_ENV
        shell: bash
      - name: Set tag for image from tag
        if: ${{ env.TYPE == 'tag' }}
        run: echo DOCKER_IMAGE_TAG=$(echo "${{ env.CLEAN_REF }}") >> $GITHUB_ENV
        shell: bash
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.GH_PACKAGE_RELEASE_USER }}
          password: ${{ secrets.GH_PACKAGE_RELEASE_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: '${{ env.DOCKER_REGISTRY }}/${{ env.REPO_NAME_WITHOUT_PREFIX }}'
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=${{ env.DOCKER_IMAGE_TAG}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'release') }}
      - name: Copy env
        run: |
          grep -o '^[^#]*' .env.example > .env
          cat .env >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost:5432" >> $GITHUB_ENV
          eval $(sed -e '/^#/d' -e 's/^/export /' -e 's/$/;/' .env) ;

      # Temporarily disable ARM build due to runner performance issues
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v2

      - name: Start database
        run: |
          docker compose up -d database
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=container:database
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          
      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=https://calcom-dev.suchtberatung.digital
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
            
      # - name: Build with docker compose
      #   run: |
      #     DOCKER_BUILDKIT=0 docker compose build --build-arg DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }} calcom

      - name: Cleanup
        run: |
          docker compose down

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
